iniciando las practicas de las clases anteriores

creamos un nuevo repositorio para empezar a trabajar

la idea es llevar bien el control de los cambios
--------------------------------------------------
los cambios que le agamos al archivo van a ser apuntes de los comandos que vayamos aprendiendo
--------------------------------------------------

Primeros comandos

$git show historia.txt (Te muesta detalladamente los cambios que haz hecho)
-------------------------------------------------------
$ git diff b6799a79d6d4f0b5bdf4901677aa96d2de1c1acd b98331f19857b43db1288f5bad19e2a1fb67c980

git diff sirve para comparar las versiones de los commit que hayas hecho
-------------------------------------------------------

git log --stat (Te muesta una lista mas detalladadelos cambios que se hicieron)
-------------------------------------------------------

git checkout b98331f19857b43db1288f5bad19e2a1fb67c980 historia.txt

Con este comando podemos volver a la version del commit que queramos

IMPORTANTE recordar que en un commit pueden haber varios archivos guardados
por eso hay que poner el codigo del commit y que archivo de ese commit quieres
volver
--------------------------------------------------
git checkout master historia.txt

con este comando podemos volver a la version actual en la que estabamos

si hacemos commit estando en el checkout anterior con el codigo ese pasaria a ser la ultima version
por eso si quieres regresar a tu ultma version para no perder los cambios 
se puede usar este comando 
-------------------------------------------------

git reset 6aff014778cf8f52511888ba77ddcb7de261287e --hard

git reset 6aff014778cf8f52511888ba77ddcb7de261287e --soft

(asi se ejecutan los comandos reset)

con git reset --hard se borra todo y se vuelve a la version que estamos indicando 

con git soft si se puede volver a la version master
------------------------------------------------------
Git add y commit guarda la informacion en el repositorio local
para mandar esa informacion respositorio remoto que es donde 
se comparte la informacion a las demas personas se usa el (Git pull)

--------------------------------------------------------------------
IMPORTANTE
--------------------------------------------------------------------
con el comando (Git BRANCH) creamos ramas en el repositorio que es esto???

primero se crea la rama en este caso fue git branch cabecera y con el comando git checkout cabecera nos movemos a esa rama
entoces estando aqui los cambios que hagamos al archivo se empezaran a guardar en la nueva rama 
y no en el master 

PARA INDICAR QUE RAMA VA A SER LA PRINCIPAL SE USA 
git branch -m main (este comando lo usamos para pasar de la rama master a la mein)

git push origin mein (para actualizar tambien el cambio en repositorio remoto)

------------------------------------------------------

con el comando git branch tambien nos muestra el nombre de las ramas
que tenemos y en donde estamos
----------------------------------------------------------
GIT MERGE PARA FUCIONAR RAMAS 

para fucionar las dos ramas se usa (git merge y el nombre de la rama que se va a fucionar)
recordar que hay que a hacer esto desde la rama master
----------------------------------------------------------
Los cuidados que hay que tener con el merge es tener en cuenta que cambios se hacen para no sobre escribirlos 
-----------------------------------------------------------

IMPORTANTE

por defecto la rama principal de los proyecto ya no es master sino mein eso lo indican en las actualizaciones de git
-------------------------------------------------------------
git pull origin main (con este comando traemos los cambios hechos en github a nuestro repositorio remoto)

git push origin main (y con este comando mandamos nuestro archivo al github)
-----------------------------------------------------------------------
ENLAZANDO github
(git remote add origin (direccion https de github))

asi se enlaza git con github
para verificar que esta hecho el cambio se usa el comando 
(git remote y git remote -v para ver los enlaces)
-----------------------------------------------------------------
antes de mandar tu informacion a repositorio remoto debes hacer
(git pull origin mein) para verificar que no hayan cambios o para ver que cambios hay en el repositorio remoto antes de enviar los tuyos 

git pull origin mein --allow-unrelated-histories
(este comando no es comun es un caso de que no te deje enviar tu repositorio )
----------------------------------
como crear un alias o renombrar un comando para que sea masfacil ejecutarlo en caso de que sea muy largo o complicado de escribirlos

( alias arbolito="git log --all --graph --decorate --oneline")
se escribre alias que vendria siendo un parametro despues el nombre
quelequeremosponer al comando y igual y entre comillas el comando 
----------------------------------------------
CREANDO TAGS

son etiquetas que puedes poner a versiones de tus commits que consideres que tienen informacion importante o por ejemplo que en ese commit este todo ok con un tag puedes indicar que esa version podria ser la version 1.0 de tu proyecto

------COMANDOS PARA CREAR Y VISUALIZAR LOS TAGS----
 
 git tag -a v0.1 -m "Resultado de las primeras clases del curso" f99b4d9

(asi se crea un tag ese seria el comando) el ultimo codigo es el codigo del commit esta abreviado porque lo buscamos con el log que ahorase llamaarbolito y te da un resumen de tus commits masdetallados  y abrevia el codigo

con el comando (git tag) puedes ver los tags que ya tienes

con el comando ( git show-ref --tags) te muestra mas detallado los tags que tienes y elcodigo completo que hace referencia al commit que se uso para crear el tag

 git push origin --tags asi enviamos el tag al repositorio

para borrar una etiqueta (git tag -d "nombre del tag")
asi borramos el tag del repositorio

para que se borre en github (git push origin :refs/tags/""nombre del tag)
